import Head from 'next/head'
import SearchHeader from '@/components/searchHeader'
import TodaysOverview from '@/components/todaysOverview'
import { useEffect, useRef, useState } from 'react'
import NextDaysData from '@/components/nextDays'
import DaysData from '@/components/Loaders/days'
import Overview from '@/components/Loaders/today'

export default function Home(props) {
  const PROPS_DATA = {
    forecast: JSON.parse(props.forecast),
    weather: JSON.parse(props.weather)
  }

  const mainRef = useRef();
  const [data, setData] = useState(PROPS_DATA)
  const [darkMode, setDarkMode] = useState(false);
  const [loader, setLoader] = useState(true);

  const handleDarkness = (value) => {
    setDarkMode(value)
    localStorage.setItem('darkness', value);
    if (value) {
      mainRef.current.className += 'dark'
    }
    else {
      mainRef.current.className = ''
    }
  }

  async function handleReq(lat, long) {
    const weaResp = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=d98411a21a90bab401b28d9346819bba&units=metric`);
    const weather = await weaResp.json();
    const forResp = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${long}&appid=d98411a21a90bab401b28d9346819bba&units=metric`);
    const forecast = await forResp.json();
    setData({ weather, forecast })
    setLoader(false)
  }

  useEffect(() => {
    navigator.geolocation.getCurrentPosition(({ coords }) => {
      handleReq(coords.latitude, coords.longitude)
    }, (err) => {
      setLoader(false)
    })
  }, [])

  return (
    <>
      <Head>
        {!loader && <title>Next Weather App</title>}
        {loader && <title>Loading...</title>}
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.png" />
      </Head>
      <div ref={mainRef}>
        <main>
          <SearchHeader darkMode={darkMode} onDark={handleDarkness} />
          {loader && <Overview darkMode={darkMode} forecast={JSON.parse(props.forecast)} weather={JSON.parse(props.weather)} />}
          {(!loader && data) && <TodaysOverview darkMode={darkMode} forecast={data.forecast} weather={data.weather} />}
          {loader && <DaysData darkMode={darkMode} forecast={JSON.parse(props.forecast)} />}
          {(!loader && data) && <NextDaysData darkMode={darkMode} forecast={data.forecast} />}
        </main>
      </div>
    </>
  )
}

export async function getStaticProps(context) {
  const weaResp = await fetch('https://api.openweathermap.org/data/2.5/weather?q=Delhi&appid=d98411a21a90bab401b28d9346819bba&units=metric')
  const weaData = await weaResp.json();

  const forResp = await fetch('https://api.openweathermap.org/data/2.5/forecast?q=Delhi&appid=d98411a21a90bab401b28d9346819bba&units=metric')
  const forData = await forResp.json();

  return {
    props: {
      weather: JSON.stringify(weaData),
      forecast: JSON.stringify(forData)
    }
  }
}